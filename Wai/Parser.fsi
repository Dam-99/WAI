// Signature file for parser generated by fsyacc
module Parser
type token = 
  | RCURLPAREN
  | LCURLPAREN
  | RPAREN
  | LPAREN
  | ASS
  | NEQ
  | GT
  | GEQ
  | EQ
  | LEQ
  | LT
  | OR
  | AND
  | NOT
  | FALSE
  | TRUE
  | DIV
  | MULT
  | MINUS
  | PLUS
  | VAR
  | WHILE
  | ELSE
  | IF
  | SKIP
  | SEMICOLON
  | EOF
  | Identifier of (string)
  | Number of (int)
type tokenId = 
    | TOKEN_RCURLPAREN
    | TOKEN_LCURLPAREN
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_ASS
    | TOKEN_NEQ
    | TOKEN_GT
    | TOKEN_GEQ
    | TOKEN_EQ
    | TOKEN_LEQ
    | TOKEN_LT
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_NOT
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_DIV
    | TOKEN_MULT
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_VAR
    | TOKEN_WHILE
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_SKIP
    | TOKEN_SEMICOLON
    | TOKEN_EOF
    | TOKEN_Identifier
    | TOKEN_Number
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_prog
    | NONTERM_seqStatement
    | NONTERM_statement
    | NONTERM_block
    | NONTERM_ifStmt
    | NONTERM_whileStmt
    | NONTERM_arithmExpr
    | NONTERM_boolExpr
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val prog : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Wai.Ast.Stm) 
